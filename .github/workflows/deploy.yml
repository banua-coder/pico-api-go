name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  GO_VERSION: '1.25.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version info

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version from tag
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "Deploying version: ${GITHUB_REF#refs/tags/}"

    - name: Build binary for Linux
      run: |
        echo "Building ${{ secrets.BINARY_NAME }} for Linux..."
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ${{ secrets.BINARY_NAME }} ./cmd/main.go
        ls -la ${{ secrets.BINARY_NAME }}
        
    - name: Verify binary
      run: |
        file ${{ secrets.BINARY_NAME }}
        echo "Binary size: $(du -h ${{ secrets.BINARY_NAME }} | cut -f1)"

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        log-public-key: false

    - name: Debug SSH configuration
      run: |
        echo "SSH Agent PID: $SSH_AGENT_PID"
        echo "SSH Auth Sock: $SSH_AUTH_SOCK"
        ssh-add -l || echo "No keys loaded in agent"
    
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding ${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PORT }} to known hosts..."
        ssh-keyscan -H -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        echo "Known hosts file created"

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection to ${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PORT }}..."
        ssh -p ${{ secrets.DEPLOY_PORT }} -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'echo "SSH connection successful"'

    - name: Deploy to production server
      run: |
        echo "üöÄ Starting deployment of ${{ env.VERSION }} to production..."
        
        # Upload the binary to a temporary location first
        echo "üì§ Uploading binary..."
        scp -P ${{ secrets.DEPLOY_PORT }} ${{ secrets.BINARY_NAME }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/${{ secrets.BINARY_NAME }}-${{ env.VERSION }}
        
        # Execute deployment script on remote server
        ssh -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e
          
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          BINARY_NAME="${{ secrets.BINARY_NAME }}"
          VERSION="${{ env.VERSION }}"
          TEMP_BINARY="/tmp/${BINARY_NAME}-${VERSION}"
          
          echo "üîç Checking deployment environment..."
          cd "$DEPLOY_PATH"
          pwd
          ls -la
          
          echo "‚èπÔ∏è  Stopping application..."
          if [ -f "./stop.sh" ]; then
            ./stop.sh
            echo "‚úÖ Application stopped successfully"
          else
            echo "‚ö†Ô∏è  stop.sh not found, skipping stop step"
          fi
          
          echo "üíæ Backing up current binary..."
          if [ -f "$BINARY_NAME" ]; then
            cp "$BINARY_NAME" "${BINARY_NAME}.backup.$(date +%Y%m%d_%H%M%S)"
            echo "‚úÖ Backup created"
          fi
          
          echo "üîÑ Replacing binary..."
          mv "$TEMP_BINARY" "$BINARY_NAME"
          chmod +x "$BINARY_NAME"
          echo "‚úÖ Binary replaced and made executable"
          
          echo "üöÄ Starting application..."
          if [ -f "./start.sh" ]; then
            ./start.sh
            echo "‚úÖ Application started successfully"
          else
            echo "‚ö†Ô∏è  start.sh not found, skipping start step"
          fi
          
          echo "üéâ Deployment of ${VERSION} completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 5  # Give the service a moment to start
        
        # Check if the service is responding (using health endpoint if available)
        if [ -n "${{ secrets.HEALTH_CHECK_URL }}" ]; then
          if curl -f -s "${{ secrets.HEALTH_CHECK_URL }}" > /dev/null; then
            echo "‚úÖ Deployment verification successful - API is responding"
          else
            echo "‚ö†Ô∏è  Deployment verification failed - API might not be responding yet"
            echo "Please check the logs manually"
          fi
        else
          echo "‚ÑπÔ∏è  No health check URL configured, skipping verification"
        fi

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary**: ${{ secrets.BINARY_NAME }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Target**: ${{ secrets.DEPLOY_PATH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Deployed successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify application functionality" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor logs for any issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY

  notification:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful for ${{ github.ref_name }}"
        else
          echo "‚ùå Deployment failed for ${{ github.ref_name }}"
          exit 1
        fi
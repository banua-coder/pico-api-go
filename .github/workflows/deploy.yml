name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  GO_VERSION: '1.25.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper version info

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version from tag
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "Deploying version: ${GITHUB_REF#refs/tags/}"

    - name: Build binary for Linux
      run: |
        echo "Building ${{ secrets.BINARY_NAME }} for Linux..."
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ${{ secrets.BINARY_NAME }} ./cmd/main.go
        ls -la ${{ secrets.BINARY_NAME }}
        
    - name: Verify binary
      run: |
        file ${{ secrets.BINARY_NAME }}
        echo "Binary size: $(du -h ${{ secrets.BINARY_NAME }} | cut -f1)"

    - name: Generate Swagger documentation
      run: |
        echo "📚 Generating Swagger documentation..."
        
        # Install swag tool
        go install github.com/swaggo/swag/cmd/swag@latest
        
        # Generate documentation including HTML
        swag init -g cmd/main.go -o ./docs --outputTypes go,json,yaml,html
        
        # Verify generated files
        echo "Generated documentation files:"
        ls -la docs/
        
        # Check if HTML was generated
        if [ -f "docs/swagger.html" ]; then
          echo "✅ HTML documentation generated successfully"
        else
          echo "⚠️  HTML documentation not found, continuing without it"
        fi

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        log-public-key: false

    - name: Debug SSH configuration
      run: |
        echo "SSH Agent PID: $SSH_AGENT_PID"
        echo "SSH Auth Sock: $SSH_AUTH_SOCK"
        ssh-add -l || echo "No keys loaded in agent"
    
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding ${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PORT }} to known hosts..."
        ssh-keyscan -H -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        echo "Known hosts file created"

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection to ${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PORT }}..."
        ssh -p ${{ secrets.DEPLOY_PORT }} -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'echo "SSH connection successful"'

    - name: Deploy to production server
      run: |
        echo "🚀 Starting deployment of ${{ env.VERSION }} to production..."
        
        # Upload the binary to a temporary location first
        echo "📤 Uploading binary..."
        scp -P ${{ secrets.DEPLOY_PORT }} ${{ secrets.BINARY_NAME }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/${{ secrets.BINARY_NAME }}-${{ env.VERSION }}
        
        # Upload documentation files
        echo "📚 Uploading documentation..."
        if [ -f "docs/swagger.html" ]; then
          scp -P ${{ secrets.DEPLOY_PORT }} docs/swagger.html ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/swagger-${{ env.VERSION }}.html
          echo "✅ HTML documentation uploaded"
        fi
        
        if [ -f "docs/swagger.json" ]; then
          scp -P ${{ secrets.DEPLOY_PORT }} docs/swagger.json ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/swagger-${{ env.VERSION }}.json
          echo "✅ JSON documentation uploaded"
        fi
        
        if [ -f "docs/swagger.yaml" ]; then
          scp -P ${{ secrets.DEPLOY_PORT }} docs/swagger.yaml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/swagger-${{ env.VERSION }}.yaml
          echo "✅ YAML documentation uploaded"
        fi
        
        # Execute deployment script on remote server
        ssh -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e
          
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          BINARY_NAME="${{ secrets.BINARY_NAME }}"
          VERSION="${{ env.VERSION }}"
          TEMP_BINARY="/tmp/${BINARY_NAME}-${VERSION}"
          
          echo "🔍 Checking deployment environment..."
          cd "$DEPLOY_PATH"
          pwd
          ls -la
          
          echo "⏹️  Stopping application..."
          if [ -f "./stop.sh" ]; then
            ./stop.sh
            echo "✅ Application stopped successfully"
          else
            echo "⚠️  stop.sh not found, skipping stop step"
          fi
          
          echo "💾 Backing up current binary..."
          if [ -f "$BINARY_NAME" ]; then
            cp "$BINARY_NAME" "${BINARY_NAME}.backup.$(date +%Y%m%d_%H%M%S)"
            echo "✅ Backup created"
          fi
          
          echo "🔄 Replacing binary..."
          mv "$TEMP_BINARY" "$BINARY_NAME"
          chmod +x "$BINARY_NAME"
          echo "✅ Binary replaced and made executable"
          
          echo "📚 Updating documentation..."
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Move documentation files if they exist
          if [ -f "/tmp/swagger-${VERSION}.html" ]; then
            mv "/tmp/swagger-${VERSION}.html" "docs/swagger.html"
            echo "✅ HTML documentation updated"
          fi
          
          if [ -f "/tmp/swagger-${VERSION}.json" ]; then
            mv "/tmp/swagger-${VERSION}.json" "docs/swagger.json"  
            echo "✅ JSON documentation updated"
          fi
          
          if [ -f "/tmp/swagger-${VERSION}.yaml" ]; then
            mv "/tmp/swagger-${VERSION}.yaml" "docs/swagger.yaml"
            echo "✅ YAML documentation updated"
          fi
          
          echo "🚀 Starting application..."
          if [ -f "./start.sh" ]; then
            ./start.sh
            echo "✅ Application started successfully"
          else
            echo "⚠️  start.sh not found, skipping start step"
          fi
          
          echo "🎉 Deployment of ${VERSION} completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 5  # Give the service a moment to start
        
        # Check if the service is responding (using health endpoint if available)
        if [ -n "${{ secrets.HEALTH_CHECK_URL }}" ]; then
          if curl -f -s "${{ secrets.HEALTH_CHECK_URL }}" > /dev/null; then
            echo "✅ Deployment verification successful - API is responding"
          else
            echo "⚠️  Deployment verification failed - API might not be responding yet"
            echo "Please check the logs manually"
          fi
        else
          echo "ℹ️  No health check URL configured, skipping verification"
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary**: ${{ secrets.BINARY_NAME }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Target**: ${{ secrets.DEPLOY_PATH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify application functionality" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor logs for any issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: needs.build-and-deploy.result == 'success'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version and release info
      id: release_info
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a hotfix or regular release
        if [[ $VERSION == *"-hotfix"* ]] || git log --oneline --grep="hotfix" -1 | grep -q "hotfix"; then
          echo "type=hotfix" >> $GITHUB_OUTPUT
        else
          echo "type=release" >> $GITHUB_OUTPUT
        fi
        
        # Get the previous tag for changelog range
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${VERSION}$" | tail -n1)
        if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$VERSION" ]; then
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n2 | tail -n1)
        fi
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ steps.release_info.outputs.version }}
        PREVIOUS_TAG=${{ steps.release_info.outputs.previous_tag }}
        TYPE=${{ steps.release_info.outputs.type }}
        
        # Create release notes file
        cat > release_notes.md << 'EOF'
        ## 🚀 Release ${{ steps.release_info.outputs.version }}
        
        **Release Type**: ${{ steps.release_info.outputs.type }}
        **Deployment**: ✅ Successfully deployed to production
        
        ### What's Changed
        
        EOF
        
        # Get commits since last tag with better formatting
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Changes since $PREVIOUS_TAG:" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits with type categorization
          git log --pretty=format:"- %s" "${PREVIOUS_TAG}..${VERSION}" | \
          grep -v "Merge branch\|Merge pull request" | \
          head -20 >> release_notes.md
        else
          echo "- Initial release" >> release_notes.md
        fi
        
        # Add deployment information
        cat >> release_notes.md << 'EOF'
        
        ### 📋 Deployment Details
        
        - **Binary**: Built with Go ${{ env.GO_VERSION }}
        - **Platform**: Linux AMD64
        - **Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **Health Check**: ${{ secrets.HEALTH_CHECK_URL || 'Manual verification required' }}
        
        ### 🔗 Links
        
        - [API Documentation](https://pico-api.banuacoder.com/swagger/index.html)
        - [Repository](https://github.com/banua-coder/pico-api-go)
        - [Health Check](https://pico-api.banuacoder.com/api/v1/health)
        EOF
        
        # Set multiline output for GitHub Actions
        echo 'RELEASE_NOTES<<EOF' >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ steps.release_info.outputs.version }}
        TYPE=${{ steps.release_info.outputs.type }}
        
        # Determine if this is a prerelease
        if [[ $VERSION == *"rc"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"alpha"* ]]; then
          PRERELEASE="--prerelease"
        else
          PRERELEASE=""
        fi
        
        # Create the release
        gh release create "$VERSION" \
          --title "🚀 $VERSION" \
          --notes "${{ steps.release_notes.outputs.RELEASE_NOTES }}" \
          $PRERELEASE \
          --target main


  notification:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, create-release]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        DEPLOY_STATUS="${{ needs.build-and-deploy.result }}"
        RELEASE_STATUS="${{ needs.create-release.result }}"
        
        if [ "$DEPLOY_STATUS" == "success" ]; then
          echo "✅ Deployment successful for ${{ github.ref_name }}"
          
          if [ "$RELEASE_STATUS" == "success" ]; then
            echo "✅ GitHub release created successfully"
          else
            echo "⚠️  GitHub release creation failed, but deployment succeeded"
          fi
        else
          echo "❌ Deployment failed for ${{ github.ref_name }}"
          exit 1
        fi
name: Auto Tag and Release

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  create-tag:
    if: github.event.pull_request.merged == true && (startsWith(github.head_ref, 'release/') || startsWith(github.head_ref, 'hotfix/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [[ $BRANCH_NAME == release/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/release\///')
            TYPE="release"
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/hotfix\///')
            TYPE="hotfix"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! $VERSION == v* ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "clean_version=$(echo $VERSION | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag $VERSION already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $VERSION does not exist, will create"
          fi

      - name: Get previous tag for changelog
        id: previous_tag
        run: |
          # Get the most recent tag before this one
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n1 || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Generate tag message and changelog
        id: tag_info
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TYPE="${{ steps.version.outputs.type }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          # Create tag message
          TAG_MESSAGE="$TYPE: $VERSION"
          echo "tag_message=$TAG_MESSAGE" >> $GITHUB_OUTPUT
          
          # Generate changelog for tag annotation
          CHANGELOG_FILE="tag_changelog.txt"
          
          echo "$TYPE $VERSION" > $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          echo "Merged PR: ${{ github.event.pull_request.html_url }}" >> $CHANGELOG_FILE
          echo "Merged by: @${{ github.event.pull_request.merged_by.login }}" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Changes since $PREVIOUS_TAG:" >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            
            # Get commits between previous tag and current merge commit
            git log --pretty=format:"- %s (%h)" "${PREVIOUS_TAG}..HEAD" | \
            grep -v "Merge branch\|Merge pull request\|chore.*auto-bump\|chore.*back-merge" | \
            head -20 >> $CHANGELOG_FILE
          else
            echo "- Initial release" >> $CHANGELOG_FILE
          fi
          
          echo "" >> $CHANGELOG_FILE
          echo "Deployment will be triggered automatically." >> $CHANGELOG_FILE
          
          echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG_MESSAGE="${{ steps.tag_info.outputs.tag_message }}"
          CHANGELOG_FILE="${{ steps.tag_info.outputs.changelog_file }}"
          
          echo "🏷️  Creating annotated tag $VERSION..."
          
          # Create annotated tag with changelog
          git tag -a "$VERSION" -F "$CHANGELOG_FILE"
          
          # Push the tag
          git push origin "$VERSION"
          
          echo "✅ Tag $VERSION created and pushed successfully"

      - name: Wait for deployment workflow
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "⏳ Waiting for deployment workflow to start..."
          sleep 10
          
          echo "🚀 Deployment workflow should now be running for tag $VERSION"
          echo "Monitor progress at: ${{ github.server_url }}/${{ github.repository }}/actions"

      - name: Comment on PR with tag creation status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TYPE="${{ steps.version.outputs.type }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          if [[ "${{ steps.check_tag.outputs.tag_exists }}" == "true" ]]; then
            gh pr comment $PR_NUMBER --body "⚠️ **Tag Already Exists**
            
            The tag \`$VERSION\` already exists in the repository.
            - **Tag**: \`$VERSION\`
            - **Type**: $TYPE
            - **Status**: ⚠️ Skipped (already exists)
            
            If you need to redeploy, you can manually trigger the deployment workflow or delete and recreate the tag."
          else
            gh pr comment $PR_NUMBER --body "🏷️ **Auto-Tag Created Successfully**
            
            A new tag has been automatically created and deployment is starting:
            - **Tag**: [\`$VERSION\`](${{ github.server_url }}/${{ github.repository }}/releases/tag/$VERSION)
            - **Type**: $TYPE
            - **Status**: ✅ Created and pushed
            - **Deployment**: 🚀 [View Progress](${{ github.server_url }}/${{ github.repository }}/actions)
            
            The deployment workflow will now automatically:
            1. Build the application
            2. Deploy to production
            3. Run health checks
            4. Create GitHub release
            
            Monitor the deployment progress in the Actions tab."
          fi

      - name: Create step summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TYPE="${{ steps.version.outputs.type }}"
          
          if [[ "${{ steps.check_tag.outputs.tag_exists }}" == "true" ]]; then
            echo "## ⚠️ Tag Already Exists" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tag**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "**Type**: $TYPE" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: Skipped - tag already exists" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### What happened" >> $GITHUB_STEP_SUMMARY
            echo "- The tag \`$VERSION\` already exists in the repository" >> $GITHUB_STEP_SUMMARY
            echo "- No new tag was created to prevent conflicts" >> $GITHUB_STEP_SUMMARY
            echo "- Manual intervention may be required if redeployment is needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🏷️ Auto-Tag Created Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tag**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "**Type**: $TYPE" >> $GITHUB_STEP_SUMMARY
            echo "**Merge Commit**: \`${{ github.event.pull_request.merge_commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### What happened" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Annotated tag \`$VERSION\` created from main branch" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Tag pushed to repository" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Deployment workflow triggered automatically" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### What's next" >> $GITHUB_STEP_SUMMARY
            echo "1. 🔍 Monitor deployment progress in Actions tab" >> $GITHUB_STEP_SUMMARY
            echo "2. ✅ Verify health checks pass" >> $GITHUB_STEP_SUMMARY
            echo "3. 🎉 GitHub release will be created automatically" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Links" >> $GITHUB_STEP_SUMMARY
            echo "- [View Tag](${{ github.server_url }}/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
            echo "- [Monitor Deployment](${{ github.server_url }}/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          fi

  handle-failure:
    if: failure() && github.event.pull_request.merged == true && (startsWith(github.head_ref, 'release/') || startsWith(github.head_ref, 'hotfix/'))
    needs: create-tag
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment on PR about tag creation failure
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          if [[ $BRANCH_NAME == release/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/release\///')
            TYPE="release"
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            VERSION=$(echo $BRANCH_NAME | sed 's/hotfix\///')
            TYPE="hotfix"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! $VERSION == v* ]]; then
            VERSION="v$VERSION"
          fi
          
          gh pr comment $PR_NUMBER --body "❌ **Auto-Tag Creation Failed**
          
          The automatic tag creation for \`$VERSION\` failed.
          
          **Manual steps required:**
          1. Create the tag manually:
             \`\`\`bash
             git checkout main
             git pull origin main
             git tag -a \"$VERSION\" -m \"$TYPE: $VERSION\"
             git push origin \"$VERSION\"
             \`\`\`
          
          2. Or use GitHub CLI:
             \`\`\`bash
             gh release create \"$VERSION\" --title \"🚀 $VERSION\" --target main
             \`\`\`
          
          **Type**: $TYPE  
          **Expected Tag**: \`$VERSION\`  
          **Status**: ❌ Failed (manual intervention required)
          
          Once the tag is created, the deployment workflow will trigger automatically."
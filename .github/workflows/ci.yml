name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: |
        echo "## ðŸ“Š Code Coverage Report" > coverage_report.md
        echo "" >> coverage_report.md
        go tool cover -func=coverage.out | tail -1 | awk '{print "**Total Coverage:** " $3}' >> coverage_report.md
        echo "" >> coverage_report.md
        echo "### Coverage by Package" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "| Package | Coverage |" >> coverage_report.md
        echo "|---------|----------|" >> coverage_report.md
        go tool cover -func=coverage.out | grep -v "total:" | awk '
        {
          # Get the file path (first field before colon)
          file_path = $1
          # Get the coverage percentage (last field)
          coverage = $NF
          gsub(/%/, "", coverage)
          
          # Extract package name from file path
          if (match(file_path, /\/(internal\/[^\/]+)/)) {
            pkg = substr(file_path, RSTART+1, RLENGTH-1)
          } else if (match(file_path, /\/(pkg\/[^\/]+)/)) {
            pkg = substr(file_path, RSTART+1, RLENGTH-1)
          } else if (match(file_path, /\/(cmd)/)) {
            pkg = "cmd"
          } else if (match(file_path, /\/(docs)/)) {
            pkg = "docs"
          } else {
            pkg = "other"
          }
          
          # Sum coverage for each package
          pkg_total[pkg] += coverage
          pkg_count[pkg]++
        }
        END {
          for (pkg in pkg_total) {
            if (pkg_count[pkg] > 0) {
              avg = pkg_total[pkg] / pkg_count[pkg]
              printf "| %s | %.1f%% |\n", pkg, avg
            }
          }
        }' | sort >> coverage_report.md
        echo "" >> coverage_report.md
        echo "### Detailed Coverage" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "<details>" >> coverage_report.md
        echo "<summary>Click to expand detailed coverage</summary>" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "\`\`\`" >> coverage_report.md
        go tool cover -func=coverage.out >> coverage_report.md
        echo "\`\`\`" >> coverage_report.md
        echo "</details>" >> coverage_report.md
    
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage_report.md', 'utf8');
          
          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸ“Š Code Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: coverage
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: coverage
            });
          }

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --out-format=colored-line-number --timeout=5m
        
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum
    
    - name: Build application
      run: go build -v -ldflags="-w -s" -o pico-api-go ./cmd/main.go
      
    - name: Verify binary
      run: |
        file pico-api-go
        echo "Binary size: $(du -h pico-api-go | cut -f1)"
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.23.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Generate coverage report
      run: |
        echo "## ðŸ“Š Code Coverage Report" > coverage_report.md
        echo "" >> coverage_report.md
        go tool cover -func=coverage.out | tail -1 | awk '{print "**Total Coverage:** " $3}' >> coverage_report.md
        echo "" >> coverage_report.md
        echo "### Coverage by Package" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "| Package | Coverage |" >> coverage_report.md
        echo "|---------|----------|" >> coverage_report.md
        go tool cover -func=coverage.out | grep -v "total:" | awk '{gsub(/.*\//, "", $1); pkg_coverage[$1] += $3; pkg_count[$1]++} END {for (pkg in pkg_coverage) printf "| %s | %.1f%% |\n", pkg, pkg_coverage[pkg]/pkg_count[pkg]}' | sort >> coverage_report.md
        echo "" >> coverage_report.md
        echo "### Detailed Coverage" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "<details>" >> coverage_report.md
        echo "<summary>Click to expand detailed coverage</summary>" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "\`\`\`" >> coverage_report.md
        go tool cover -func=coverage.out >> coverage_report.md
        echo "\`\`\`" >> coverage_report.md
        echo "</details>" >> coverage_report.md
    
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage_report.md', 'utf8');
          
          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸ“Š Code Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: coverage
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: coverage
            });
          }
        
    - name: Build
      run: go build -v ./cmd/main.go

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --out-format=colored-line-number